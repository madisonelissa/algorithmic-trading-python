import numpy as np
import pandas as pd
import requests
import math
from scipy import stats
from statistics import mean
import xlsxwriter
from secret import IEX_CLOUD_API_TOKEN as token

def chunks(lst, n):
    #break up list into sublists of n length
    for i in range(0, len(lst), n):
        yield lst[i:i + n]
        
def portfolio_input():
    #prompt user for portfolio size
    while True:
        pos = input('Please enter how much you\'d like to invest. Enter q to quit: ')
        if pos== 'q':
            quit()
        try:
            position_size(pos)
        except ValueError:
            print('Error. Please enter an integer number. Enter q to quit.')
        
def position_size(pos_size):
    #calculate equal-weight position sizes of top 50 highest-quality momentum stocks and save to Excel file
    global hqm_dataframe
    pos_size = float(pos_size)/len(hqm_dataframe.index)
    for i in range(0, len(hqm_dataframe)):
        hqm_dataframe.loc[i, 'Number of Shares to Buy'] = math.floor(pos_size/hqm_dataframe.loc[i, 'Stock Price'])
    writer = pd.ExcelWriter('momentum-strategy.xlsx', engine = 'xlsxwriter')
    hqm_dataframe.to_excel(writer, sheet_name='Momentum Strategy', index=False)

    background_color = '#0a0a23'
    font_color = '#ffffff'

    string_format = writer.book.add_format(
        {
            'font_color': font_color,
            'bg_color': background_color,
            'border': 1
        }
    )

    dollar_format = writer.book.add_format(
        {
            'num_format': '$0.00',
            'font_color': font_color,
            'bg_color': background_color,
            'border': 1
        }
    )

    integer_format = writer.book.add_format(
        {
            'num_format': '0',
            'font_color': font_color,
            'bg_color': background_color,
            'border': 1
        }
    )

    percent_format = writer.book.add_format(
        {
            'num_format': '00.00%',
            'font_color': font_color,
            'bg_color': background_color,
            'border': 1
        }
    )

    column_formats = {
        'A': ['Ticker', string_format],
        'B': ['Stock Price', dollar_format],
        'C': ['Number of Shares to Buy', integer_format],
        'D': ['One-Year Price Return', percent_format],
        'E': ['One-Year Return Percentile', percent_format],
        'F': ['Six-Month Price Return', percent_format],
        'G': ['Six-Month Return Percentile', percent_format],
        'H': ['Three-Month Price Return', percent_format],
        'I': ['Three-Month Return Percentile', percent_format],
        'J': ['One-Month Price Return', percent_format],
        'K': ['One-Month Return Percentile', percent_format],
        'L': ['HQM Score', percent_format]
    }

    for column in column_formats.keys():
        writer.sheets['Momentum Strategy'].set_column(f'{column}:{column}', 18, column_formats[column][1])
        writer.sheets['Momentum Strategy'].write(f'{column}1',column_formats[column][0],column_formats[column][1])
    writer.save()
    return hqm_dataframe
    
#get S&P 500 stock tickers from CSV file
stocks = pd.read_csv('sp_500_stocks.csv')

#break stocks into formatted chunks for batch API calls
symbol_groups = list(chunks(stocks['Ticker'], 100))
symbol_strings = []
for i in range(0, len(symbol_groups)):
    symbol_strings.append(','.join(symbol_groups[i]))

#create high-quality momentum (hqm) dataframe
hqm_columns = [
    'Ticker',
    'Stock Price',
    'Number of Shares to Buy',
    'One-Year Price Return',
    'One-Year Return Percentile',
    'Six-Month Price Return',
    'Six-Month Return Percentile',
    'Three-Month Price Return',
    'Three-Month Return Percentile',
    'One-Month Price Return',
    'One-Month Return Percentile',
    'HQM Score'
]
hqm_dataframe = pd.DataFrame(columns = hqm_columns)

#batch api calls + fill in change percent for each stock to hqm dataframe
for symbol_string in symbol_strings:
    batch_quote_api_call_url = f'https://api.iex.cloud/v1/data/core/quote/{symbol_string}?token={token}'
    batch_stats_api_call_url = f'https://api.iex.cloud/v1/data/core/advanced_stats/{symbol_string}?token={token}'
    quote_data = requests.get(batch_quote_api_call_url).json()
    stats_data = requests.get(batch_stats_api_call_url).json()
    for i, symbol in enumerate(symbol_string.split(',')):
        hqm_dataframe = hqm_dataframe.append(
            pd.Series(
            [
                symbol,
                quote_data[i]['latestPrice'],
                'N/A',
                stats_data[i]['year1ChangePercent'],
                'N/A',
                stats_data[i]['month6ChangePercent'],
                'N/A',
                stats_data[i]['month3ChangePercent'],
                'N/A',
                stats_data[i]['month1ChangePercent'],
                'N/A',
                'N/A'
            ],
            index=hqm_columns,
            ),
            ignore_index=True,
        )

#fill in 0.0 for stocks with "None" in Price Return for stats calculations
time_periods = ['One-Year', 'Six-Month', 'Three-Month', 'One-Month']
for row in hqm_dataframe.index:
    for time_period in time_periods:
        price_return_column = f'{time_period} Price Return'
        percentile_column = f'{time_period} Return Percentile'
        if hqm_dataframe.loc[row, price_return_column] == None:
            hqm_dataframe.loc[row, price_return_column] = 0.0
           
#calcualate Return Percentile compared to all stocks price returns and fill in Return Percentile column 
for row in hqm_dataframe.index:
    for time_period in time_periods:
        price_return_column = f'{time_period} Price Return'
        percentile_column = f'{time_period} Return Percentile'
        hqm_dataframe.loc[row, percentile_column] = stats.percentileofscore(hqm_dataframe[price_return_column], float(hqm_dataframe.loc[row, price_return_column]))/100
        
#For each stock, find mean of Return Percentiles for each time frame (1-year, 6-mo, etc) and calculate HQM Score
for row in hqm_dataframe.index:
    momentum_percentiles = []
    for time_period in time_periods:
        momentum_percentiles.append(hqm_dataframe.loc[row, f'{time_period} Return Percentile'])
    hqm_dataframe.loc[row, 'HQM Score'] = mean(momentum_percentiles)

#sort and index top 50 values
hqm_dataframe.sort_values('HQM Score', ascending=False, inplace=True)
hqm_dataframe = hqm_dataframe[:50]
hqm_dataframe.reset_index(inplace=True, drop=True)

portfolio_input()